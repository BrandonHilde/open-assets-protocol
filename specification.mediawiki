<pre>
  Title: Colored Coin Protocol (CCP/1.0)
  Author: Flavien Charlon <flavien.charlon@pixode.net>
  Created: 12-12-2013
</pre>

==Abstract==

This document describes a protocol used for coloring outputs in the Blockchain.

Colored coins are initially issued using normal uncolored Bitcoins and marking them with a color. They can then be transferred using transactions that preserve the amount of coins of every color.

==Motivation==

In the current Bitcoin implementation, outputs have an output script and a value. Colored Coin Protocol adds the ability to have a color component to each output.

There are numerous applications to colored coins:

* A company might want to issue shares using colored coins, taking advantage of the Bitcoin infrastructure to allow people to maintain ownership of shares and trade shares, and even allow voting and pay dividends over the Bitcoin blockchain.

* Smart property: suppose there is a car rental company. The company can release one colored coin to represent each car, and then configure the car to turn on only if it receives a message signed with the private key that currently owns the colored coin. It can then release a smartphone app that anyone can use to broadcast a message signed with their private key, and put up the colored coins on a trading platform. Anyone will be able to then purchase a colored coin, use the car for whatever period of time using the smartphone app as a "car key", and sell the coin again at their leisure.

* A local community might wish to create a community currency, using the Bitcoin infrastructure to securely store funds.

* A company may wish to create a corporate currency, such as Air Miles rewards points, or even plain coupons.

* A bank might wish to release a coin to represent deposits, allowing people to trade, for example, "USD coins" or "gold coins".

==Protocol==

Each output in the Blockchain can either be uncolored, or be tagged with a color.

The color of an output has two components. The '''physical color''' is the hash of the transaction that issued those colored coins. Coins with the same physical color are interchangeable with each other. Coins of a given physical color are in limited supply.

By convention, the '''logical color''' of an output is the output script referenced by the first input of the issuing transaction. The logical color is a representation of who issued the coins. Coins that have the same logical color cannot be mixed together unless they also have the same physical color. Coins of a given logical color can be re-issued at will as long as the issuer retains the private key required to issue them.

In the typical use case, the logical color would be a Pay-to-PubKey-Hash script. The issuer would create a color by generating an address and the matching private key. The private key is then used to issue coins. This gives the guarantee that nobody else but the original issuer is able to issue coins with the same logical color.

When somebody issues colored coins, he typically associates them with a formal or informal promise that he will redeem the coins according to terms he has defined. That contract can be defined at multiple levels:
* At the physical color level: the issuer would for example only commit to redeem coins issued by transactions listed on their website.
* At the logical color level: the issuer could commit to redeem any coin of a specific logical color.
* At an intermediate level: the issuer would commit to redeem coins of a specific logical color, except if the issuing transaction has been repudiated.

The Colored Coins Protocol uses two types of transactions: one to issue colored coins, and one to transfer colored coins. Transactions that are not recognized as either of those two types are considered as having all their outputs uncolored.

===Colored Coin Marker Output===

Transactions relevant to the Colored Coins Protocol contain a special output called the marker output. The marker output is an OP_RETURN output followed by a header. The contents of the marker header is described below. Additional optional metadata can be appended after the header.

{|
! Field            !! Description !! Size
|-
! Length           || The var-integer encoded length of the marker header. Always 0x08.  || 1 byte
|-
! CCP Marker       || A marker indicating that this transaction is using Colored Coins Protocol. It is always 0x43435000. || 4 bytes
|-
! Version number   || The major revision number of the CCP protocol used. For this version, it is 1. || 2 bytes
|-
! Transaction type || 1 to indicate an issue transaction, or 2 to indicate a transfer transaction. || 2 bytes
|}

===Issuing colored coins===

Issuing new colored coins is done through a special transaction called issue transaction. The format of such transaction is described below:

{|
! Input/Output                     !! Description !! Color
|-
! Input 0                          || The output script referenced by this input becomes the logical color of the coins being issued. || The referenced output can be of any color.
|-
! Input 1+                         || Any other inputs. || The referenced outputs can be of any color.
|-
! Outputs before the marker output || Colored outputs. || Considered colored.
|-
! Marker output                    || This output is the [[#colored-coin-marker-output|marker output]], it uses the OP_RETURN operator. || The output is neither colored nor uncolored since it is not spendable.
|-
! Outputs after the marker output  || Outputs used for change. || Considered uncolored.
|-
! Fees                             || Transaction fees left for the miners. || Considered uncolored.
|}

The marker output acts as a separator between colored outputs, which are before the metadata container, and uncolored outputs, which are after.

Colored outputs have the following characteristics:
* Their '''physical color''' is the standard transaction hash of this transaction.
* Their '''logical color''' is the output script referenced by the first input of this transaction.

===Color transfer===

Transfer transactions can then be used to transfer any amount of colored coin. A transfer transaction is constructed as follow:

{|
! Input/Output !! Description
|-
! Input 0+     || Each input can be of any color, or uncolored. They do not need to have all the same color.
|-
! Output 0     || This output is the [[#colored-coin-marker-output|marker output]], it uses the OP_RETURN operator.
|-
! Output 1+    || Colored outputs of the transaction.
|-
! Fees         || Transaction fees left for the miners. Considered uncolored.
|}

The [[#colored-coin-marker-output|marker output]] output uses the OP_RETURN operator to store data. It indicates to color-aware clients that this transaction is relevant for the Colored Coins Protocol.

====Output coloring====

The physical color of outputs are determined using a method called order based coloring.

The algorithm works by coloring outputs in the same order as inputs are colored, taking values into account.

The boundaries where an input of a physical color is followed by an input of different physical color should match boundaries between outputs. If any of the input boundary is not aligned with an output boundary, the transaction is deemed invalid according to the Colored Coins Protocol, and all the outputs are considered uncolored. Clients modified to support the Colored Coins Protocol should reject such transactions.

==Rationale==

This approach offers a number of desirable characteristics:

# Economical: Neither the genesis process nor color transfer requires the parties to spend anything more than they want to transact, except for the usual transaction fee. This is because metadata is stored in an OP_RETURN output, which is not subject to the dust rule.
# Clients have a way to identify colored outputs simply by traversing the Blockchain, without needing to be fed external data. Transactions relevant to the Colored Coins Protocol are identified by the special marker output.
# Colors are pseudonymous. They are represented by a transaction hash, which is enough to identify each color uniquely, while still providing an adequate level of anonymity.
# This approach uses the recommended way to embed data in the blockchain (OP_RETURN), and therefore does not pollute the UTXO.
# The whole cryptographic infrastructure that Bitcoin provides for securing the spending of outputs is reused for securing the ability to issue colored coins. There is a symmetry between ''an address + private key'' as a way to spend Bitcoins, and ''an address + private key'' as a way to issue colored coins.
# Generating a color is as simple as generating an address, and can even be done offline.
# Reissuing coins of a given color is easy and can be done at no cost (except for the transaction fee) as long as the issuer keeps the matching private key.
# Single-issue colors can be achieved by only using the physical color and ignoring the logical color.
# Since logical colors are identified by an output script, it is possible to create a color that requires multiple signatures for issuance.

==Compatibility==

For backward compatibility reasons, we consider than an older client is allowed to see a colored output as uncolored.

===Backward compatibility with existing Bitcoin protocol===

The Colored Coins Protocol sits on top of the Bitcoin protocol. It does not require any change to the existing Bitcoin protocol. Existing clients that don't support the colored coins protocol will see all outputs as uncolored, and will not be able to perform transfer transactions.

===Compatibility between different versions of CCP===

New versions with the same major version number (e.g. 1.1) should be backwards compatible, but may include new coloring algorithms. If they do so, older version will not recognize the transfer transactions created by newer clients, and using the new algorithm, but this is considered a valid behavior. Older clients may see some colored outputs as uncolored.

New versions with a different major version number (e.g. 2.0) can introduce breaking changes, but transactions created by newer clients will be identifiable by a different version number in the output 0 of genesis and transfer transactions.