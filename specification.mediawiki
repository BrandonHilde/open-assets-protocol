<pre>
  Title: Colored Coin Protocol (CCP/1.0)
  Author: Flavien Charlon <flavien.charlon@pixode.net>
  Created: 12-12-2013
</pre>

==Abstract==

This document describes a protocol used for coloring outputs in the Blockchain.

Colored coins are initially issued using normal uncolored Bitcoins and marking them with a color. They can then be transferred using transactions that preserve the amount of coins of every color.

==Motivation==

In the current Bitcoin implementation, outputs have an output script and a value. Colored Coin Protocol adds the ability to have a color component to each output.

There are many applications to colored coins:

* A company could issue colored coins representing shares. The shares could then be traded fictionlessly through the Bitcoin infrastructure.
* A bank could issue colored coins backed by a cash reserve. People could withdraw and deposit money in colored coins, and trade those, or use them to pay for goods and services. The Blockchain becomes a system allowing to transact not only in Bitcoin, but in any currency.
* Locks on cars or houses could be associated to coins of a particular color. The door would only open when presented with a wallet containing a coin of that particular color.

==Protocol Overview==

Each output in the Blockchain can be either uncolored, or tagged with a color. The color of an output has two components: the ''source transaction'' and the ''source address''.

The '''source transaction''' is the transaction that issued those colored coins. Coins from the same ''source transaction'' are interchangeable with each other. By construction, the supply of coins from a particular ''source transaction'' is fixed. The ''source transaction'' is referred to using its hash.

The '''source address''' of an output is, by convention, the RIPEMD-160 hash of the output script referenced by the first input of the ''source transaction''. The ''source address'' is a representation of who issued the coins. Coins from the same ''source address'' cannot be mixed together unless they are also from the same ''source transaction''. The issuer can reissue new coins colored with the same ''source address'' as long as he retains the private key.

When represented in base-58, a ''source address'' must use the Pay-to-Script-Hash version byte (5 in mainnet, 196 in testnet3), since it is a hash of a script. The base-58 representation of a ''source address'' therefore starts with a '3' in mainnet.

In the typical use case, the ''source address'' would be a hash of a Pay-to-PubKey-Hash script:
# The issuer first generates a private key: <code>18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725</code>.
# He calculates the corresponding address: <code>16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM</code>.
# Next, he builds the Pay-to-PubKey-Hash script associated to that address: <code>OP_DUP OP_HASH160 010966776006953D5567439E5E39F86A0D273BEE OP_EQUALVERIFY OP_CHECKSIG</code>.
# He then hashes that script to obtain the ''source address'': <code>3AH9zTfTEo7tKi3EYWQuofb1pzWtZJ4EeS</code>.

The private key from the first step is required to issue coins colored with the ''source address'' <code>3AH9zTfTEo7tKi3EYWQuofb1pzWtZJ4EeS</code>. This acts as a digital signature, and gives the guarantee that nobody else but the original issuer is able to issue coins with the same ''source address''.

When somebody issues colored coins, he typically associates them with a formal or informal promise that he will redeem the coins according to terms he has defined. That contract can be defined at multiple levels. For example:
* At the ''source transaction'' level: the issuer only commits to redeem coins issued by transactions listed on their website.
* At the ''source address'' level: the issuer commits to redeem any coin from a particular ''source address''.
* At an intermediate level: the issuer commits to redeem coins that have a particular ''source address'', except if the ''source transaction'' appears on a repudiation list.

The Colored Coins Protocol uses two types of transactions: one to issue colored coins, and one to transfer colored coins. Transactions that are not recognized as either of those two types are considered as having all their outputs uncolored.

==Colored Coins Transactions==

===Issuing colored coins===

Issuing new colored coins is done through a special transaction called issue transaction. The format of such transaction is described below:

{|
! Input/Output                     !! Description !! Color
|-
! Input 0                          || The output script referenced by this input can be hashed using RIPEMD-160 to obtain the ''source address'' of the coins being issued. || The referenced output can be of any color.
|-
! Input 1+                         || Any other inputs. || The referenced outputs can be of any color.
|-
! Outputs before the marker output || Colored outputs. || Considered colored.
|-
! Marker output                    || This output is the [[#colored-coins-marker-output|marker output]], it uses the OP_RETURN operator. || The output is neither colored nor uncolored since it is not spendable.
|-
! Outputs after the marker output  || Outputs used for change. || Considered uncolored.
|-
! Fees                             || Transaction fees left for the miners. || Considered uncolored.
|}

The marker output acts as a separator between colored outputs, which are before the marker, and uncolored outputs, which are after.

Colored outputs have the following characteristics:
* This transaction becomes their '''source transaction'''.
* Their '''source address''' is the RIPEMD-160 hash of the output script referenced by the first input of this transaction.

===Color transfer===

Transfer transactions are used to send colored and uncolored coins. A transfer transaction is constructed as follow:

{|
! Input/Output !! Description
|-
! Input 0+     || Each input can be of any color, or uncolored. They do not need to have all the same color.
|-
! Output 0     || This output is the [[#colored-coins-marker-output|marker output]], it uses the OP_RETURN operator.
|-
! Output 1+    || Other outputs of the transaction.
|-
! Fees         || Transaction fees left for the miners. Considered uncolored.
|}

The [[#colored-coins-marker-output|marker output]] output uses the OP_RETURN operator to store data. It indicates to color-aware clients that this transaction is relevant for the Colored Coins Protocol.

If an output has the value of zero satoshis (this can be the case for the marker output), it is considered uncolored.

====Output coloring====

The ''source transaction'' of outputs (and by extension their ''source address'') are determined using a method called order based coloring.

The algorithm works by coloring outputs in the same order as inputs are colored, taking values into account. When an output is mapped to an input, the ''source transaction'' and ''source address'' of the output referenced by the input is carried to the output.

The boundaries where an input from a particular ''source transaction'' is followed by an input from a different ''source transaction'' should match boundaries between outputs. If any of the input boundary is not aligned with an output boundary, the transaction is deemed invalid according to the Colored Coins Protocol, and all the outputs are considered uncolored. Fees must be paid using uncolored coins for the transaction to be valid, and must come from the last inputs.

Clients modified to support the Colored Coins Protocol should reject transfer transactions that do not follow those rules.

====Example====

This is an example of a valid transfer transaction:

    =================================   =================================
    Input 0                             Output 0 - Marker output
      Value:              1               Value:              0
      Source Transaction: 104cc329...     Source Transaction: <NULL>
      Source Address:     3o1B7Ngv...     Source Address:     <NULL>
    ---------------------------------   ---------------------------------
    Input 1                             Output 1
      Value:              3               Value:              2
      Source Transaction: 104cc329...     Source Transaction: 104cc329...
      Source Address:     3o1B7Ngv...     Source Address:     3o1B7Ngv...
    =================================   ---------------------------------
    Input 2                             Output 2
      Value:              1               Value:              2
      Source Transaction: 2031d526...     Source Transaction: 104cc329...
      Source Address:     3Q2V2xuz...     Source Address:     3o1B7Ngv...
    ---------------------------------   =================================
    Input 3                             Output 3
      Value:              1               Value:              1
      Source Transaction: 2031d526...     Source Transaction: 2031d526...
      Source Address:     3Q2V2xuz...     Source Address:     3Q2V2xuz...
    =================================   =================================
    Input 4                             Fees
      Value:              2               Value:              2
      Source Transaction: <NULL>          Source Transaction: <NULL>
      Source Address:     <NULL>          Source Address:     <NULL>
    =================================   =================================

The inputs are grouped in contiguous blocks of inputs from the same ''source transaction'':
* The first two inputs form the first block, worth 4 Bitcoins and with the ''source transaction'' <code>104cc329...</code>.
* The next two inputs form a second block worth 2 Bitcoins with the ''source transaction'' <code>2031d526...</code>.
* The last input forms the third block worth 2 uncolored Bitcoins.

A similar grouping process is now performed on outputs, trying to form blocks of the same size as the input blocks:
* The first three inputs form the first block, worth 4 Bitcoins.
* The output 3 is the second block, worth 2 Bitcoin.
* Fees form the third block, worth 2 Bitcoins.

The boundaries formed by inputs and outputs match, since both inputs and outputs have in the same order blocks worth 4 Bitcoins, 2 Bitcoins and 2 Bitcoins, so the transaction is a valid transfer transaction.

The ''source transaction'' and ''source address'' are then sequentially carried from inputs to outputs:
* As part of the first block, the first three outputs become colored with a ''source transaction'' <code>104cc329...</code> and a ''source address'' <code>3o1B7Ngv...</code>, except output 0 (the marker output) since it has a value of zero.
* Input 3 from the second block, becomes colored with the ''source transaction'' <code>2031d526...</code> and the ''source address'' <code>3Q2V2xuz...</code>.
* Finally, fees remain uncolored.

===Colored coins marker output===

Transactions relevant to the Colored Coins Protocol contain a special output called the marker output. The marker output is an OP_RETURN output followed by a header. The contents of the marker header is described below.

{|
! Field            !! Description !! Size
|-
! Length           || The var-integer encoded length of the marker header. Always 0x08.  || 1 byte
|-
! CCP Marker       || A marker indicating that this transaction is using Colored Coins Protocol. It is always 0x43435000. || 4 bytes
|-
! Version number   || The major revision number of the CCP protocol used. For this version, it is 1. || 2 bytes
|-
! Transaction type || 1 to indicate an issue transaction, or 2 to indicate a transfer transaction. || 2 bytes
|}

Additional optional metadata can be appended after the header. Possible formats for this metadata are outside of scope of this protocol, and may be described in separate protocol specifications building on top of this one.

==Rationale==

This approach offers a number of desirable characteristics:

# Economical: Neither the issuance process nor color transfer requires the parties to spend anything more than they want to transact, except for the usual transaction fee. This is because metadata is stored in an OP_RETURN output, which is not subject to the dust rule.
# Clients have a way to identify colored outputs simply by traversing the Blockchain, without needing to be fed external data. Transactions relevant to the Colored Coins Protocol are identified by the special marker output.
# Colors are pseudonymous. They are represented by a transaction hash (the ''source transaction'') and/or an address (the ''source address''), which is enough to identify each color uniquely, while still providing an adequate level of anonymity.
# This approach uses the recommended way to embed data in the blockchain (OP_RETURN), and therefore does not pollute the UTXO.
# The whole cryptographic infrastructure that Bitcoin provides for securing the spending of outputs is reused for securing the ability to issue colored coins. There is a symmetry between ''an address + private key'' as a way to spend Bitcoins, and ''an address + private key'' as a way to issue colored coins.
# Generating a reissuable color based on a ''source address'' is as simple as generating an address, and can even be done offline.
# Reissuing coins of a given color is easy and can be done at no cost (except for the transaction fee) as long as the issuer keeps the matching private key.
# Single-issue colors can be achieved by only using the ''source transaction'' and ignoring the ''source address''.
# Since output scripts are not limited to Pay-to-PubKey-Hash script but can be any script, it is possible to create a color represented by a ''source address'' that requires multiple signatures for issuance.

==Compatibility==

For backward compatibility reasons, we consider than an older client is allowed to see a colored output as uncolored.

===Backward compatibility with existing Bitcoin protocol===

The Colored Coins Protocol sits on top of the Bitcoin protocol. It does not require any change to the existing Bitcoin protocol. Existing clients that don't support the colored coins protocol will see all outputs as uncolored, and will not be able to perform transfer transactions.

===Compatibility between different versions of CCP===

New versions with the same major version number (e.g. 1.1) should be backwards compatible, but may include new coloring algorithms. If they do so, older version will not recognize the transfer transactions created by newer clients, and using the new algorithm, but this is considered a valid behavior. Older clients may see some colored outputs as uncolored.

New versions with a different major version number (e.g. 2.0) can introduce breaking changes, but transactions created by newer clients will be identifiable by a different version number in the output 0 of genesis and transfer transactions.