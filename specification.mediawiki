<pre>
  Title: Colored Coin Protocol (CCP/1.0)
  Author: Flavien Charlon <flavien.charlon@coinprism.com>
  Created: 12-12-2013
</pre>

==Abstract==

This document describes a protocol used for coloring outputs in the Blockchain.

Colored coins are initially issued using normal uncolored Bitcoins and marking them with a color. They can then be transferred using transactions that preserve the amount of coins of every color.

==Motivation==

In the current Bitcoin implementation, outputs have an output script and a value. Colored Coin Protocol adds the ability to have a color component to each output.

There are many applications to colored coins:

* A company could issue colored coins representing shares. The shares could then be traded frictionlessly through the Bitcoin infrastructure.
* A bank could issue colored coins backed by a cash reserve. People could withdraw and deposit money in colored coins, and trade those, or use them to pay for goods and services. The Blockchain becomes a system allowing to transact not only in Bitcoin, but in any currency.
* Locks on cars or houses could be associated to coins of a particular color. The door would only open when presented with a wallet containing a coin of that particular color.

==Protocol Overview==

Each output in the Blockchain can be either uncolored, or tagged with a color. The color of an output has two components: the ''source transaction'' and the ''source address''.

The '''source transaction''' is the transaction that issued those colored coins. Coins from the same ''source transaction'' are interchangeable with each other. By construction, the supply of coins from a particular ''source transaction'' is fixed. The ''source transaction'' is referred to using its hash.

The '''source address''' of an output is, by convention, the RIPEMD-160 hash of the output script referenced by the first input of the ''source transaction''. The ''source address'' is a representation of who issued the coins. Coins from the same ''source address'' cannot be mixed together unless they are also from the same ''source transaction''. The issuer can reissue new coins colored with the same ''source address'' as long as they retain the private key.

When represented in base-58, a ''source address'' must use the Pay-to-Script-Hash version byte (5 in mainnet, 196 in testnet3), since it is a hash of a script. The base-58 representation of a ''source address'' therefore starts with a '3' in mainnet.

In the typical use case, the ''source address'' would be a hash of a Pay-to-PubKey-Hash script:
# The issuer first generates a private key: <code>18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725</code>.
# He calculates the corresponding address: <code>16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM</code>.
# Next, he builds the Pay-to-PubKey-Hash script associated to that address: <code>OP_DUP OP_HASH160 010966776006953D5567439E5E39F86A0D273BEE OP_EQUALVERIFY OP_CHECKSIG</code>.
# He then hashes that script to obtain the ''source address'': <code>3AH9zTfTEo7tKi3EYWQuofb1pzWtZJ4EeS</code>.

The private key from the first step is required to issue coins colored with the ''source address'' <code>3AH9zTfTEo7tKi3EYWQuofb1pzWtZJ4EeS</code>. This acts as a digital signature, and gives the guarantee that nobody else but the original issuer is able to issue coins with the same ''source address''.

When somebody issues colored coins, he typically associates them with a formal or informal promise that he will redeem the coins according to terms he has defined. That contract can be defined at multiple levels. For example:
* At the ''source transaction'' level: the issuer only commits to redeem coins issued by transactions listed on their website.
* At the ''source address'' level: the issuer commits to redeem any coin from a particular ''source address''.
* At an intermediate level: the issuer commits to redeem coins from a particular ''source address'', except if their ''source transaction'' appears on a repudiation list.

The Colored Coins Protocol uses two types of transactions: one to issue colored coins, and one to transfer colored coins. Transactions that are not recognized as either of those two types are considered as having all their outputs uncolored.

==Colored Coins Transactions==

===Issuing colored coins===

Issuing new colored coins is done through a special transaction called issue transaction. The format of such transaction is described below:

{|
! Input/Output                     !! Description !! Color
|-
! Input 0                          || The output script referenced by this input can be hashed using RIPEMD-160 to obtain the ''source address'' of the coins being issued. || The referenced output can be of any color.
|-
! Input 1+                         || Any other inputs. || The referenced outputs can be of any color.
|-
! Outputs before the marker output || Colored outputs. || Considered colored.
|-
! Marker output                    || This output is the [[#colored-coins-marker-output|marker output]], it uses the OP_RETURN operator. || Considered uncolored.
|-
! Outputs after the marker output  || Outputs used for change. || Considered uncolored.
|-
! Fees                             || Transaction fees left for the miners. || Considered uncolored.
|}

The marker output acts as a separator between colored outputs, which are before the marker, and uncolored outputs, which are after.

Colored outputs have the following characteristics:
* This transaction becomes their '''source transaction'''.
* Their '''source address''' is the RIPEMD-160 hash of the output script referenced by the first input of this transaction.

===Color transfer===

Transfer transactions are used to send colored and uncolored coins. A transfer transaction is constructed as follow:

{|
! Input/Output !! Description
|-
! Input 0+     || Each input can be of any color, or uncolored. They do not need to have all the same color.
|-
! Output 0     || This output is the [[#colored-coins-marker-output|marker output]], it uses the OP_RETURN operator.
|-
! Output 1+    || Other outputs of the transaction.
|-
! Fees         || Transaction fees left for the miners. Considered uncolored.
|}

The [[#colored-coins-marker-output|marker output]] output uses the OP_RETURN operator to store data. It indicates to color-aware clients that this transaction is relevant for the Colored Coins Protocol.

If an output has the value of zero satoshis (this can be the case for the marker output), it is considered uncolored.

====Output coloring====

The ''source transaction'' of outputs (and by extension their ''source address'') are determined using a method called order based coloring.

First, groups of inputs and outputs are formed. In each group, the total value of inputs must be equal to the total value of outputs. Inputs and outputs within a group must be consecutive. The algorithm used to build the groups is the following:

    1. Initialization:
       - If the transaction is paying fees, fees are treated like an imaginary last output for the
         purpose of constructing the groups.
       - The current input is input 0, and the current output is output 0.
       - Start a new empty group.
    2. If the total value of inputs in the group is less than the total value of outputs in the group:
         Add the current input to the current group.
         Move the current input to next input.
       Else:
         Add the current output to the current group.
         Move the current output to next output.
    3. If the total value of inputs in the group equals the total value of outputs in the group:
         Add the current group to the list of completed groups, and start a new empty group.
    4. If the current input has reached the end of all available inputs and the current output has
       reached the end of all available outputs (including fees):
         Exit.
       Else:
         Go back to step 2.

After the groups have been constructed, the colors of the outputs within each group is computed from the colors of the inputs within that group. If the inputs of a group are all from the same ''source transaction'', the outputs of that group are all colored with this ''source transaction''. If the inputs have mixed ''source transactions'' or any input in the group is uncolored, the outputs of that group are all uncolored. Outputs with a value of 0 are always considered uncolored.

Even if fees are paid from a group of colored inputs, fees received by miners are uncolored.

====Example====

This is an example of a transfer transaction:

    =============================   =============================
    Input 0                         Output 0 - Marker output
      Value:              1           Value:              0
      Source Transaction: T1          Source Transaction: <NULL>
      Source Address:     A1          Source Address:     <NULL>
    -----------------------------   -----------------------------
    Input 1                         Output 1
      Value:              3           Value:              2
      Source Transaction: T1          Source Transaction: T1
      Source Address:     A1          Source Address:     A1
    =============================   -----------------------------
    Input 2                         Output 2
      Value:              1           Value:              2
      Source Transaction: T1          Source Transaction: T1
      Source Address:     A1          Source Address:     A1
    -----------------------------   =============================
    Input 3                         Output 3
      Value:              1           Value:              2
      Source Transaction: T2          Source Transaction: <NULL>
      Source Address:     A2          Source Address:     <NULL>
    =============================   =============================
    Input 4                         Output 4
      Value:              2           Value:              3
      Source Transaction: T2          Source Transaction: T2
      Source Address:     A2          Source Address:     A2
    -----------------------------   -----------------------------
    Input 5                         Fees
      Value:              2           Value:              1
      Source Transaction: T2          Source Transaction: <NULL>
      Source Address:     A2          Source Address:     <NULL>
    =============================   =============================

Groups are constructed so that they have the same total value and are in the same order. An imaginary output is added as the last output to account for fees (1 Bitcoin).

Three groups can be constructed:
* Inputs 0 and 1 and outputs 0, 1 and 2 form the first group.
** The total value of that group is 4 Bitcoin.
** Inputs 0 and 1 are from the same ''source transaction'' <code>T1</code>, so outputs 1 and 2 are colored with ''source transaction'' <code>T1</code> and ''source address'' <code>A1</code>. Output 0 has a value of 0, so it is uncolored.
* Inputs 2 and 3 and output 3 form the second group. 
** The total value of that group is 2 Bitcoin.
** Input 2 is from ''source transaction'' <code>T1</code> and input 3 is from ''source transaction'' <code>T2</code>. Because they are different, output 3 is uncolored.
* Inputs 4 and 5, output 4 and the fees form the third group.
** The total value of that group is 4 Bitcoin.
** Inputs 4 and 5 are from the same ''source transaction'' <code>T2</code>, so output 4 is colored with ''source transaction'' <code>T2</code> and ''source address'' <code>A2</code>. Fees are always uncolored.

===Colored coins marker output===

Transactions relevant to the Colored Coins Protocol contain a special output called the marker output. The marker output is an OP_RETURN output followed by a header. The contents of the marker header are described below.

{|
! Field            !! Description !! Size
|-
! Length           || The var-integer encoded length of the marker header. Always 0x08.  || 1 byte
|-
! CCP Marker       || A marker indicating that this transaction is using Colored Coins Protocol. It is always 0x43435000. || 4 bytes
|-
! Version number   || The major revision number of the CCP protocol used. For this version, it is 1. || 2 bytes
|-
! Transaction type || 1 to indicate an issue transaction, or 2 to indicate a transfer transaction. || 2 bytes
|}

Additional optional metadata can be appended after the header. Possible formats for this metadata are outside of scope of this protocol, and may be described in separate protocol specifications building on top of this one.

Essentially, in this version of the protocol, the marker output must start with:
* <code>0x084343500001000100</code> for an issue transaction.
* <code>0x084343500001000200</code> for a transfer transaction.

==Rationale==

This approach offers a number of desirable characteristics:

# Economical: Neither the issuance process nor color transfer requires the parties to spend anything more than they want to transact, except for the usual transaction fee. This is because metadata is stored in an OP_RETURN output, which is not subject to the dust rule.
# Clients have a way to identify colored outputs simply by traversing the Blockchain, without needing to be fed external data. Transactions relevant to the Colored Coins Protocol are identified by the special marker output.
# Colors are pseudonymous. They are represented by a transaction hash (the ''source transaction'') and/or an address (the ''source address''), which is enough to identify each color uniquely, while still providing an adequate level of anonymity.
# This approach uses the recommended way to embed data in the blockchain (OP_RETURN), and therefore does not pollute the UTXO.
# The whole cryptographic infrastructure that Bitcoin provides for securing the spending of outputs is reused for securing the ability to issue colored coins. There is a symmetry between ''an address + private key'' as a way to spend Bitcoins, and ''an address + private key'' as a way to issue colored coins.
# Generating a reissuable color based on a ''source address'' is as simple as generating an address, and can even be done offline.
# Reissuing coins of a given color is easy and can be done at no cost (except for the transaction fee) as long as the issuer keeps the matching private key.
# Single-issue colors can be achieved by only using the ''source transaction'' and ignoring the ''source address''.
# Since output scripts are not limited to Pay-to-PubKey-Hash script but can be any script, it is possible to create a color represented by a ''source address'' that requires multiple signatures for issuance.

==Compatibility==

For backward compatibility reasons, we consider than an older client is allowed to see a colored output as uncolored.

===Backward compatibility with existing Bitcoin protocol===

The Colored Coins Protocol sits on top of the Bitcoin protocol. It does not require any change to the existing Bitcoin protocol. Existing clients that don't support the colored coins protocol will see all outputs as uncolored, and will not be able to perform transfer transactions.

===Compatibility between different versions of CCP===

New versions with the same major version number (e.g. 1.1) should be backwards compatible, but may include new coloring algorithms. If they do so, older version will not recognize the transfer transactions created by newer clients, and using the new algorithm, but this is considered a valid behavior. Older clients may see some colored outputs as uncolored.

New versions with a different major version number (e.g. 2.0) can introduce breaking changes, but transactions created by newer clients will be identifiable by a different version number in the output 0 of genesis and transfer transactions.